/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

--SOLUTIONS

-- Q1: What is the total amount each customer spent at the restaurant?
SELECT
  	s.customer_id,
    SUM(m.price) AS total_spent
FROM dannys_diner.sales AS s
LEFT JOIN dannys_diner.menu AS m
	USING (product_id)
GROUP BY s.customer_id
ORDER BY customer_id;

-- Q2: How many days has each customer visited the restaurant?
SELECT
	customer_id,
    COUNT(DISTINCT(order_date)) AS num_of_days_visited
FROM dannys_diner.sales
GROUP BY customer_id;

-- Q3: What was the first item from the menu purchased by each customer?
WITH ranked_sales AS 
(
  SELECT 
      *,
      DENSE_RANK() OVER (
        PARTITION BY customer_id
        ORDER BY order_date) AS order_rank
  FROM dannys_diner.sales
)

SELECT 
	DISTINCT
    s.customer_id,
    s.order_date,
    m.product_name
FROM ranked_sales AS s
JOIN dannys_diner.menu AS m
	ON s.product_id = m.product_id
    AND s.order_rank = 1
ORDER BY s.customer_id;

-- Q4: What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT 
	m.product_name,
    COUNT(*) AS total_purchases
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
	USING (product_id)
GROUP BY m.product_name
ORDER BY total_purchases DESC
LIMIT 1;

-- Q5: Which item was the most popular for each customer?
WITH customer_order_count AS 
(
  	SELECT
  		customer_id,
        product_id,
  		COUNT(*) AS order_count,
  		RANK() OVER (
          PARTITION BY customer_id
          ORDER BY COUNT(*) DESC) AS ranking
  	FROM dannys_diner.sales 
    GROUP BY customer_id, product_id
)
SELECT
	coc.customer_id,
    m.product_name,
    coc.order_count
FROM customer_order_count AS coc
JOIN dannys_diner.menu AS m
	USING (product_id)
WHERE coc.ranking = 1
ORDER BY coc.customer_id, coc.order_count;

-- Q6: Which item was purchased first by the customer after they became a member?
WITH member_purchases_ranked AS
(
  SELECT
      s.customer_id AS customer_id,
      s.order_date AS order_date,
      menu.product_name AS product_name,
      RANK() OVER (
        PARTITION BY s.customer_id
        ORDER BY s.order_date) AS ranking
  FROM dannys_diner.sales AS s
  RIGHT JOIN dannys_diner.members AS members
      ON s.customer_id = members.customer_id
      AND s.order_date >= members.join_date
  JOIN dannys_diner.menu AS menu
      ON s.product_id = menu.product_id
)
SELECT
	customer_id,
    order_date,
    product_name
FROM member_purchases_ranked
WHERE ranking = 1;

-- Q7: Which item was purchased just before the customer became a member?
WITH premember_purchases_ranked AS
(
  SELECT
      s.customer_id AS customer_id,
      s.order_date AS order_date,
      menu.product_name AS product_name,
      RANK() OVER (
        PARTITION BY s.customer_id
        ORDER BY s.order_date DESC) AS ranking
  FROM dannys_diner.sales AS s
  RIGHT JOIN dannys_diner.members AS members
      ON s.customer_id = members.customer_id
      AND s.order_date < members.join_date
  JOIN dannys_diner.menu AS menu
      ON s.product_id = menu.product_id
)
SELECT
	customer_id,
    order_date,
    product_name
FROM premember_purchases_ranked
WHERE ranking = 1;

-- Q8: What is the total items and amount spent for each member before they became a member?
SELECT
    s.customer_id AS customer_id,
    COUNT(s.product_id) AS premember_orders,
    SUM(menu.price) AS total_premember_spending
FROM dannys_diner.sales AS s
RIGHT JOIN dannys_diner.members AS members
    ON s.customer_id = members.customer_id
    AND s.order_date < members.join_date
JOIN dannys_diner.menu AS menu
    ON s.product_id = menu.product_id
GROUP BY s.customer_id
ORDER BY s.customer_id;

-- Q9: If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT
	s.customer_id,
    SUM(CASE WHEN m.product_name = 'sushi' 
    	THEN 20*m.price ELSE 10*m.price END) AS total_points
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
	USING (product_id)
GROUP BY customer_id
ORDER BY customer_id;

-- Q10: In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH members_with_dates AS
(
  SELECT
  	*,
  	join_date + INTERVAL '6 day' AS end_first_week,
  	make_date(2021, 01, 31) AS end_of_jan
  FROM dannys_diner.members
)

SELECT
	s.customer_id,
    SUM(
      CASE 
      	WHEN menu.product_name = 'sushi' THEN 20*menu.price
      	WHEN s.order_date BETWEEN members.join_date AND members.end_first_week
      		THEN 20*menu.price
      	ELSE 10*menu.price
      END
    ) AS total_points
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS menu
	USING (product_id)
RIGHT JOIN members_with_dates AS members
	USING (customer_id)
WHERE s.order_date <= members.end_of_jan
GROUP BY s.customer_id
ORDER BY s.customer_id;